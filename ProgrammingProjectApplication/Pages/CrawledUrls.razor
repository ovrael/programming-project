@page "/crawled-urls"

@using ProgrammingProjectApplication.Data

@inject WebCrawler WebCrawler

<h1>Web Crawler Results</h1>

<br>


<div class="form-group">
    <label for="urlInput">Enter a URL:</label>
    <input type="text" class="form-control" id="urlInput" @bind-value="@Url" @oninput="OnUrlInput" />
    @if (UrlValidationMessage != null)
    {
        <div class="text-danger">@UrlValidationMessage</div>
    }
</div>

<br>

<button type="button" class="btn btn-primary" @onclick="CrawlAsync">Crawl</button>

<br>
<br>

@if (IsLoading)
{
    <p>Loading...</p>
}

@if (urls != null)
{
    <p>Gathered @urls.Count URLs:</p>
    <ul>
        @foreach (var url in urls)
        {
            <li><a href="@url" target="_blank">@url</a></li>
        }
    </ul>
}

@code {

    private bool IsLoading;
    private string Url { get; set; }
    private string UrlValidationMessage { get; set; }
    private List<string> urls;

    private async Task CrawlAsync()
    {
        ValidateUrl();
        StateHasChanged();
        IsLoading = true;

        if (UrlValidationMessage == null)
        {
            
            urls = await WebCrawler.CrawlAsync(Url);
            
        }

        IsLoading = false;
    }

    private void OnUrlInput(ChangeEventArgs e)
    {
        Url = (string)e.Value;
        ValidateUrl();
        StateHasChanged();
    }

    private void ValidateUrl()
    {
        if (Uri.TryCreate(Url, UriKind.Absolute, out var uriResult) && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
        {
            UrlValidationMessage = null;
        }
        else
        {
            UrlValidationMessage = "Please enter a valid URL, starting with 'http://' or 'https://'.";
        }
    }
}