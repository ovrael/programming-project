@page "/"
@using ProgrammingProjectApplication.Database;
@using ProgrammingProjectApplication.Data.Database.Models;
@using ProgrammingProjectApplication.Components;
@using ProgrammingProjectApplication.Data;
@inject IJSRuntime jsRuntime


<PageTitle>Index</PageTitle>


@if (!foundGame)
{
    <div class="row text-center">
        <div class="logo col-12 pt-5">
            GAME CHANGER
        </div>
    </div>
    <div class="searchBarContainer">
        <div class="label">Search for game</div>
        <div class="searchBar">
            <input class="searchQueryInput" id="searchQueryInput" type="text" name="searchQueryInput" placeholder="Search" value="@searchText"
               @oninput="(e)=> searchText = e.Value.ToString()" @onkeydown="CheckIfPressedEnter" />
            <button id="searchQuerySubmit" type="submit" name="searchQuerySubmit" @onclick="FindGameData">
                <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                    <path fill="#666666" d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
                </svg>
            </button>
        </div>
    </div>
}
else
{
    <SearchedGame @ref="searchedGame"></SearchedGame>
    <div class="row text-center" style="width: 300px; margin: 0 auto;">
        <div class="col-12 py-1 resetText" @onclick="ResetSearch">
            <i>
                Search for something else
            </i>
        </div>
    </div>
    <SuggestedGames @ref="suggestedGames"></SuggestedGames>
}

@code
{
    private SearchedGame? searchedGame;
    private SuggestedGames? suggestedGames;
    private GameData searchedGameData = new GameData();
    private string searchText = string.Empty;
    private bool foundGame = false;
    private int daysForUpdate = 1;

    public async Task CheckIfPressedEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await FindGameData();
        }
    }

    public async Task FindGameData()
    {
        searchText = searchText.Trim();
        if (searchText.Length == 0)
        {
            DebugHelper.WriteMessage("Search text is empty");
            return;
        }

        DebugHelper.WriteMessage($"Searching for: {searchText}");

        // Has to be scrapper, bacuase we can't match user input with database title that easly
        GameData databaseGameData = await SearchWebForGameData(searchText);
        foundGame = databaseGameData.Id >= 0;
        if (!foundGame)
        {
            await jsRuntime.InvokeAsync<string>("ShowAlert", $"Could not find any game with title: {searchText}");
            return;
        }
        searchedGameData = databaseGameData;
        await InvokeAsync(StateHasChanged); // Force SearchedGame component to create and render

        if (searchedGame is null || suggestedGames is null)
        {
            DebugHelper.WriteMessage($"Searched game data or suggestedGames component wasn't created and rendered.", MessageType.Error);
            await jsRuntime.InvokeAsync<string>("ShowAlert", "Something went wrong...");
            return;
        }

        searchedGame.SetGameData(searchedGameData);
        int gameId = await UpdateDatabase(searchedGameData);
        searchedGameData.Id = gameId;
        await suggestedGames.SetGameData(searchedGameData);

        DebugHelper.WriteMessage($"Found: {DebugHelper.GameDataToString(searchedGameData)}");
    }

    public async Task<GameData> SearchWebForGameData(string title)
    {
        Response response = await SteamScrapper.ScrapeSearchedGame(searchText);

        if (!response.Result)
        {
            DebugHelper.WriteMessage($"Can't find game. Response:{response.Message}", MessageType.Error);
            await jsRuntime.InvokeAsync<string>("ShowAlert", response.Message);
            return new GameData();
        }

        var gameData = response.ReturnedObject as GameData;
        if (gameData is null)
        {
            DebugHelper.WriteMessage($"Game data is null after successfully responded from scrapper.", MessageType.Error);
            await jsRuntime.InvokeAsync<string>("ShowAlert", "Something went wrong...");
            return new GameData();
        }

        return gameData;
    }

    private async Task<int> UpdateDatabase(GameData gameData)
    {
        GameData gameDataInDatabase = await DatabaseHandler.GetGameDataAsync(gameData.Title, gameData.ReleaseDate.Year);
        DateTime weekAgoFromToday = DateTime.Today.AddDays(-daysForUpdate);

        if (DateTime.Compare(gameDataInDatabase.LastUpdated, weekAgoFromToday) > 0)
        {
            // Updated in the past daysForUpdate
            // No need to update
            return gameDataInDatabase.Id;
        }

        gameData.LastUpdated = DateTime.Today;

        // No gamedata in database
        if (gameDataInDatabase.Title.Length == 0)
            await DatabaseHandler.AddGameDataAsync(gameData);
        else
            await DatabaseHandler.UpdateGameDataAsync(gameData);

        var x = await DatabaseHandler.GetGameDataAsync(gameData.Title, gameData.ReleaseDate.Year);
        return x.Id;
    }

    private void ResetSearch()
    {
        foundGame = false;
        searchText = string.Empty;
        searchedGameData = new GameData();
    }
}