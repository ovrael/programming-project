@page "/steam-games"
@using ProgrammingProjectApplication.Data

<h1>Steam Games</h1>
<br>
<h4>Game Info List</h4>
<br>

<div class="form-group">
    <p>Enter a value between 1 and 100:</p>
    <input type="number" min="1" max="100" @bind-value="UserValue" />
    @if (ErrorMessage != null)
    {
        <div class="text-danger">@ErrorMessage</div>
        ErrorMessage = null;
    }

</div>

<br>

<button type="button" class="btn btn-primary" @onclick="ScrapeGames">Scrape</button>

<br>
<br>

<div class="form-group">
    <label for="sort-field">Sort by field:</label>
    <select class="form-control" id="sort-field" @bind="SortField">
        <option value="Title">Title</option>
        <option value="DiscountAmount">Discount</option>
    </select>
</div>

<div class="form-group">
    <label for="sort-order">Sort order:</label>
    <select class="form-control" id="sort-order" @bind="SortOrder">
        <option value="Asc">Ascending</option>
        <option value="Desc">Descending</option>
    </select>
</div>

<br>

<p>Scrape Tags: @scrapeTags</p>

<button @onclick="ToggleScrapeTags">Toggle Scrape Tags</button>


<br>
<br>

@if (IsLoading)
{
    <p>Already loaded games... @alreadyLoadedGamesCounter</p>
}


@if (sortedGameInfos != null)
{
    <ul>

        <p><strong style="font-size: 18px;">Gathered @sortedGameInfos.Count Games Info:</strong></p>


        @foreach (var gameInfo in sortedGameInfos)
        {
            <li>
                <strong>@gameInfo.Title</strong>
                <br />
                <br />
                <img src="@gameInfo.ImageSource" alt="@gameInfo.Title" />
                <br />
                <br />
                Price: @gameInfo.OriginalPrice
                <br />

                @{
                    if (!string.IsNullOrEmpty(gameInfo.DiscountedPrice))
                    {
                        <text>
                            Discount: @gameInfo.DiscountAmount%
                            <br />
                            Discounted price: @gameInfo.DiscountedPrice
                            <br />
                        </text>
                    }
                }

                Release Date: @gameInfo.ReleaseDate
                <br />
                Url to game site: <a href="@gameInfo.UrlLink" target="_blank">@gameInfo.UrlLink</a>

                <br>
                <br>

                @if (gameInfo.GameTags != null)
                {
                    <div style="display: @(!gameInfo.ShowTags ? "none" : "block")">
                        @if (gameInfo.GameTags.Count == 0)
                        {
                            <p>No tags found</p>
                        }
                        else
                        {
                            <ul>
                                @foreach (var tag in gameInfo.GameTags)
                                {
                                    <li>@tag</li>
                                }
                            </ul>
                        }
                    </div>

                    <br>

                    <button type="button" class="btn btn-sm btn-secondary" @onclick="(e) => ToggleTags(gameInfo)">@(gameInfo.ShowTags ? "Hide tags" : "Show tags")</button>
                }


            </li>

            <br>

        }

    </ul>
}

@code {

    private bool IsLoading;
    private bool scrapeTags = false;
    private string ErrorMessage;
    private List<SteamGameInfo> GameInfos = new List<SteamGameInfo>();
    private List<SteamGameInfo> sortedGameInfos;

    private int UserValue;

    private int alreadyLoadedGamesCounter;

    private string SortField = "";
    private string SortOrder = "";

    private bool ShowTags;

    private async Task ScrapeGames()
    {

        ValidateUserInput(UserValue);
        StateHasChanged();

        if (ErrorMessage == null)
        {
            var httpClient = new HttpClient();
            var steamScraper = new SteamScrapper(httpClient);
            try
            {
                IsLoading = true;

                if (GameInfos != null)
                {
                    GameInfos.Clear();
                }
                
                await foreach (var game in steamScraper.Scrape(UserValue, scrapeTags))
                {
                    GameInfos.Add(game);
                    alreadyLoadedGamesCounter++;

                    if (GameInfos.Count % 10 == 0)
                    {
                        StateHasChanged();
                    }


                }

                SortGameInfos(SortField, SortOrder);

                IsLoading = false;
                alreadyLoadedGamesCounter = 0;
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }

        StateHasChanged();

    }

    private string ValidateUserInput(int value)
    {
        if (value < 1 || value > 100)
        {
            ErrorMessage = "Please enter a value between 0 and 100.";
        }

        return null;
    }

    private void SortGameInfos(string sortField, string sortOrder)
    {
        switch (sortField)
        {
            case "Title":
                if (sortOrder == "Asc")
                {
                    sortedGameInfos = GameInfos.OrderBy(g => g.Title).ToList();
                }
                else if (sortOrder == "Desc")
                {
                    sortedGameInfos = GameInfos.OrderByDescending(g => g.Title).ToList();
                }
                break;

            case "DiscountAmount":
                if (sortOrder == "Asc")
                {
                    sortedGameInfos = GameInfos.OrderBy(x => x.DiscountAmount).ToList();
                }
                else if (sortOrder == "Desc")
                {
                    sortedGameInfos = GameInfos.OrderByDescending(x => x.DiscountAmount).ToList();
                }
                break;

            default:
                sortedGameInfos = GameInfos;
                break;
        }
    }

    private void ToggleTags(SteamGameInfo gameInfo)
    {
        gameInfo.ShowTags = !gameInfo.ShowTags;
    }

    private void ToggleScrapeTags()
    {
        scrapeTags = !scrapeTags;
    }


}
